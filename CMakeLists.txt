# wz-lobbyreader
# Copyright (C) 2021 Zhuchkov Maxim
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

cmake_minimum_required(VERSION 3.4.3)
project(wz-lobbyreader VERSION 1.0)

include(CheckIncludeFile)
include(CheckIncludeFileCXX)

CHECK_INCLUDE_FILE_CXX("vector" VECTOR_CXX)
if(NOT VECTOR_CXX)
	message(FATAL_ERROR "std::vector not found")
endif()
CHECK_INCLUDE_FILE_CXX("string" STRING_CXX)
if(NOT STRING_CXX)
	message(FATAL_ERROR "std::string not found")
endif()
CHECK_INCLUDE_FILE("errno.h" ERRNO_H)
if(NOT ERRNO_H)
	message(FATAL_ERROR "errno not found")
endif()
CHECK_INCLUDE_FILE("sys/types.h" SYS_TYPES_H)
if(NOT SYS_TYPES_H)
	message(FATAL_ERROR "sys/types.h not found")
endif()
CHECK_INCLUDE_FILE("sys/socket.h" SYS_SOCKET_H)
if(NOT SYS_SOCKET_H)
	message(FATAL_ERROR "sys/socket.h not found")
endif()
CHECK_INCLUDE_FILE("arpa/inet.h" ARPA_INET_H)
if(NOT ARPA_INET_H)
	message(FATAL_ERROR "arpa/inet.h not found")
endif()
CHECK_INCLUDE_FILE("string.h" STRING_H)
if(NOT STRING_H)
	message(FATAL_ERROR "string.h not found")
endif()
CHECK_INCLUDE_FILE("unistd.h" UNISTD_H)
if(NOT UNISTD_H)
	message(FATAL_ERROR "unistd.h not found")
endif()
CHECK_INCLUDE_FILE("netdb.h" NETDB_H)
if(NOT NETDB_H)
	message(FATAL_ERROR "netdb.h not found")
endif()

include(CheckFunctionExists)
CHECK_FUNCTION_EXISTS("setsockopt" F_SETSOCKOPT)
if(NOT F_SETSOCKOPT)
	message(FATAL_ERROR "Function setsockopt not found")
endif()
CHECK_FUNCTION_EXISTS("socket" F_SOCKET)
if(NOT F_SOCKET)
	message(FATAL_ERROR "Function socket not found")
endif()
CHECK_FUNCTION_EXISTS("gethostbyname" F_GETHOSTBYNAME)
if(NOT F_GETHOSTBYNAME)
	message(FATAL_ERROR "Function gethostbyname not found")
endif()
CHECK_FUNCTION_EXISTS("strcpy" F_STRCPY)
if(NOT F_STRCPY)
	message(FATAL_ERROR "Function strcpy not found")
endif()
CHECK_FUNCTION_EXISTS("inet_ntoa" F_INET_NTOA)
if(NOT F_INET_NTOA)
	message(FATAL_ERROR "Function inet_ntoa not found")
endif()
CHECK_FUNCTION_EXISTS("inet_pton" F_INET_PTON)
if(NOT F_INET_PTON)
	message(FATAL_ERROR "Function inet_pton not found")
endif()
CHECK_FUNCTION_EXISTS("connect" F_CONNECT)
if(NOT F_CONNECT)
	message(FATAL_ERROR "Function connect not found")
endif()
CHECK_FUNCTION_EXISTS("htons" F_HTONS)
if(NOT F_HTONS)
	message(FATAL_ERROR "Function htons not found")
endif()
CHECK_FUNCTION_EXISTS("ntohl" F_HTONL)
if(NOT F_HTONL)
	message(FATAL_ERROR "Function ntohl not found")
endif()
CHECK_FUNCTION_EXISTS("recv" F_RECV)
if(NOT F_RECV)
	message(FATAL_ERROR "Function recv not found")
endif()
CHECK_FUNCTION_EXISTS("write" F_WRITE)
if(NOT F_WRITE)
	message(FATAL_ERROR "Function write not found")
endif()
CHECK_FUNCTION_EXISTS("malloc" F_MALLOC)
if(NOT F_MALLOC)
	message(FATAL_ERROR "Function malloc not found")
endif()
CHECK_FUNCTION_EXISTS("free" F_FREE)
if(NOT F_FREE)
	message(FATAL_ERROR "Function free not found")
endif()


add_library(lobbyreader lobbyreader.cpp)
target_include_directories(lobbyreader PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

add_executable(lobbydemo lobbydemo.cpp)
target_link_libraries(lobbydemo LINK_PUBLIC lobbyreader)